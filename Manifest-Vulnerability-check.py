import xml.etree.ElementTree as ET
import sys

def check_vulnerabilities(manifest_path):
    tree = ET.parse(manifest_path)
    root = tree.getroot()

    # Define the Android namespace
    android_ns = {'android': 'http://schemas.android.com/apk/res/android'}

    vulnerabilities = []

    # Check for exported activities
    for component in root.findall('.//activity', android_ns):
        if component.attrib.get('{http://schemas.android.com/apk/res/android}exported') == 'true':
            vulnerabilities.append(f"Exported activity: {component.attrib.get('{http://schemas.android.com/apk/res/android}name')}")

    # Check for exported services
    for component in root.findall('.//service', android_ns):
        if component.attrib.get('{http://schemas.android.com/apk/res/android}exported') == 'true':
            vulnerabilities.append(f"Exported service: {component.attrib.get('{http://schemas.android.com/apk/res/android}name')}")

    # Check for exported receivers
    for component in root.findall('.//receiver', android_ns):
        if component.attrib.get('{http://schemas.android.com/apk/res/android}exported') == 'true':
            vulnerabilities.append(f"Exported receiver: {component.attrib.get('{http://schemas.android.com/apk/res/android}name')}")

    # Check for sensitive permissions
    for permission in root.findall('uses-permission', android_ns):
        perm_name = permission.attrib.get('{http://schemas.android.com/apk/res/android}name')
        if perm_name in [
            'android.permission.READ_EXTERNAL_STORAGE',
            'android.permission.WRITE_EXTERNAL_STORAGE',
            'android.permission.INTERNET'
        ]:
            vulnerabilities.append(f"Sensitive permission: {perm_name}")

    # Check for allowBackup
    application = root.find('application', android_ns)
    if application is not None and application.attrib.get('{http://schemas.android.com/apk/res/android}allowBackup') == 'true':
        vulnerabilities.append("Allow backup is enabled")

    return vulnerabilities

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 Manifest-Vulnerability-check.py <path_to_AndroidManifest.xml>")
        sys.exit(1)

    manifest_path = sys.argv[1]
    vulnerabilities = check_vulnerabilities(manifest_path)
    if vulnerabilities:
        print("Vulnerabilities found:")
        for vulnerability in vulnerabilities:
            print(f" - {vulnerability}")
    else:
        print("No vulnerabilities found.")
